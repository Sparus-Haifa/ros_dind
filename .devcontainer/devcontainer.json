// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.205.2/containers/docker-existing-dockerfile
{
	"name": "ros_dind",

	// Sets the run context to one level up instead of the .devcontainer folder.
	// "context": "..",

	// Update the 'dockerFile' property if you aren't using the standard 'Dockerfile' filename.
	"build": {
		"dockerfile": "../Dockerfile",
		// Update 'VARIANT' to pick an Ubuntu version: jammy / ubuntu-22.04, focal / ubuntu-20.04, bionic /ubuntu-18.04
		// Use ubuntu-22.04 or ubuntu-18.04 on local arm64/Apple Silicon.
		"args": { "VARIANT": "ubuntu-20.04",
					"TOKEN": "${localEnv:TOKEN}"
		}
	},


	// Set *default* container specific settings.json values on container create.
	"settings": {},
	
	// Add the IDs of extensions you want installed when the container is created.
	"extensions": [],

	"runArgs": ["--env=DISPLAY=${env:DISPLAY}", "--env=QT_X11_NO_MITSHM=1", "--volume=/tmp/.X11-unix:/tmp/.X11-unix:rw", "--env=XAUTHORITY=${env:XAUTH}", "--volume=${env:XAUTH}:${env:XAUTH}", "--runtime=nvidia","--privileged", "--net=host"],


	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": [],

	// Uncomment the next line to run commands after the container is created - for example installing curl.
	// "postCreateCommand": "apt-get update && apt-get install -y curl",

	// Uncomment when using a ptrace-based debugger like C++, Go, and Rust
	
	// "build": { "args": { "TOKEN": "${localEnv:TOKEN}", "MYARGFROMENVVAR": "${localEnv:VARIABLE_NAME}" } },
	
	// "runArgs": [ "--env=DISPLAY=$DISPLAY", "--env=QT_X11_NO_MITSHM=1", "--volume=/tmp/.X11-unix:/tmp/.X11-unix:rw", "--env=XAUTHORITY=$XAUTH", "--volume=$XAUTH:$XAUTH", "--runtime=nvidia" ]
	// "runArgs": [ "--env=DISPLAY=:1", "--env=QT_X11_NO_MITSHM=1", "--volume=/tmp/.X11-unix:/tmp/.X11-unix:rw" ]
	//"runArgs": ["--env=DISPLAY=${env:DISPLAY}", "--env=QT_X11_NO_MITSHM=1", "--volume=/tmp/.X11-unix:/tmp/.X11-unix:rw", "--env=XAUTHORITY=${env:XAUTH}", "--volume=${env:XAUTH}:${env:XAUTH}", "--runtime=nvidia", "--device=/dev/video0"],

	// "runArgs": ["--env=DISPLAY=${env:DISPLAY}", "--env=QT_X11_NO_MITSHM=1", "--volume=/tmp/.X11-unix:/tmp/.X11-unix:rw", "--env=XAUTHORITY=${env:XAUTH}", "--volume=${env:XAUTH}:${env:XAUTH}", "--runtime=nvidia"],

	// "runArgs": ["--env=DISPLAY=${env:DISPLAY}", "--env=QT_X11_NO_MITSHM=1", "--volume=/tmp/.X11-unix:/tmp/.X11-unix:rw", "--env=XAUTHORITY=${env:XAUTH}", "--volume=${env:XAUTH}:${env:XAUTH}", "--runtime=nvidia", "--volume=/dev/bus/usb:/dev/bus/usb", "--volume=/dev:/dev"],

	// "runArgs": ["--env=DISPLAY=${env:DISPLAY}", "--env=QT_X11_NO_MITSHM=1", "--volume=/tmp/.X11-unix:/tmp/.X11-unix:rw", "--env=XAUTHORITY=${env:XAUTH}", "--volume=${env:XAUTH}:${env:XAUTH}", "--device=/dev/input/js0", "--privileged", "--net=host"],

	// "runArgs": ["--env=DISPLAY=${env:DISPLAY}", "--env=QT_X11_NO_MITSHM=1", "--volume=/tmp/.X11-unix:/tmp/.X11-unix:rw", "--env=XAUTHORITY=${env:XAUTH}", "--volume=${env:XAUTH}:${env:XAUTH}", "--device=/dev/input/js0", "--privileged"],




	// "runArgs": [  "--volume=/tmp/.X11-unix:/tmp/.X11-unix:rw"]


	// Uncomment to use the Docker CLI from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker.
	// "mounts": [ "source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind" ],

	// Uncomment to connect as a non-root user if you've added one. See https://aka.ms/vscode-remote/containers/non-root.
	// "remoteUser": "vscode"

	"workspaceFolder": "/home/catkin_ws/src"
	// "workspaceFolder": "/workspaces/RovVision2_old"

		// Comment out to connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
		// "remoteUser": "vscode"  //,
		// "features": {
		// 	"docker-from-docker": "20.10",
		// 	"git": "latest"
		// }

}